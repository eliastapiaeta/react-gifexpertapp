{"version":3,"sources":["componenst/AddCategory.js","helpers/getGifs.js","componenst/GifGridItem.js","componenst/GifGrid.js","hooks/useFetchGifs.js","base/GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setinputValue","inputNumberValue","setInputNumberValue","stringToNum","valNaN","cantidad","valNull","num","match","haveNumber","toString","substring","numtext","val","out","i","length","indexOf","charAt","limLengthStr","valor","limite","vmax","valorLimitado","valorAlcanzado","onSubmit","e","preventDefault","trim","cats","cat","handleSubmit","id","placeholder","type","maxLength","pattern","value","onChange","valorFiltrado","target","inValue","getGifs","categoria","quantity","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categorias","category","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b701742c.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategorias }) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n    const [inputNumberValue, setInputNumberValue] = useState(10);\r\n\r\n    const handleInputChangeText = (e) => {\r\n        const valorFiltrado = numtext(e.target.value);\r\n        const valorLimitado = limLengthStr(valorFiltrado, 25);\r\n\r\n        if (valorLimitado) {\r\n            setinputValue(valorFiltrado);\r\n            // console.log('inputValue: ' + inputValue);\r\n            // console.log('valorFiltrado: ' + valorFiltrado);\r\n        }\r\n    }\r\n    const handleInputChangeNum = (e) => {\r\n        const cantidad = 2;\r\n        const inValue = (e.target.value !== \"\") && e.target.value;\r\n        const valorFiltrado = stringToNum(inValue, cantidad);\r\n        const { valorLimitado } = (valorFiltrado) && limLengthStr(valorFiltrado.toString(), cantidad);\r\n\r\n        // console.log('\\n');\r\n        // console.log('inValue: ' + inValue);\r\n        // console.log('valorFiltrado: ' + valorFiltrado);\r\n        // console.log('valorLimitado: ' + valorLimitado);\r\n        // console.log('valorAlcanzado: ' + valorAlcanzado);\r\n        // console.log('\\n');\r\n        if (valorLimitado) {\r\n            setInputNumberValue(valorFiltrado);\r\n            // console.log('inputValue: ' + inputValue);\r\n            // console.log('valorFiltrado: ' + valorFiltrado);\r\n        }\r\n        if (!valorFiltrado) {\r\n            setInputNumberValue('');\r\n        }\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            const inputNum = (inputNumberValue !== \"\") && inputNumberValue;\r\n            if (inputNum) {\r\n                setCategorias(cats => [{ num: inputNumberValue, cat: inputValue }, ...cats]);\r\n                setinputValue('');\r\n            } \r\n        }\r\n\r\n    }\r\n    const stringToNum = (valNaN, cantidad) => {\r\n\r\n        const valNull = (valNaN !== null) && valNaN;\r\n        const regex = /(\\d+)/g;\r\n\r\n        // console.log('valNaN: ' + valNaN);\r\n        // console.log('valNull: ' + valNull);\r\n\r\n        const num = valNull ? valNull.match(regex) : null;\r\n        const haveNumber = (num !== null) && num;\r\n\r\n        // console.log('num:::: ' + typeof haveNumber + ' ' + haveNumber);\r\n\r\n        const resul = (haveNumber) && (haveNumber.toString()).substring(0, cantidad);\r\n\r\n        return resul;\r\n    }\r\n    const numtext = (val) => {\r\n        let out = '';\r\n        //Se añaden las letras validas\r\n        let filtro = ' abcdefghijklmnñopqrstuvwxyzABCDEFGHIJKLMNÑOPQRSTUVWXYZ1234567890';//Caracteres validos\r\n\r\n        for (let i = 0; i < val.length; i++)\r\n            if (filtro.indexOf(val.charAt(i)) !== -1)\r\n                out += val.charAt(i);\r\n        return out;\r\n    }\r\n    const limLengthStr = (valor: String, limite: Number) => {\r\n        // console.log(limite);\r\n        const vmin = 0;\r\n        const vmax = valor.length;\r\n        const valorAlcanzado = (limite === vmax) && true;\r\n        // console.log('\\n valor: ' + valor);\r\n        // console.log('vmin: ' + vmin + ' vmax: ' + vmax);\r\n        const valorLimitado = ((vmax >= vmin) && (vmax <= limite)) && true;\r\n        return { valorLimitado, valorAlcanzado };\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={(e) => handleSubmit(e)}>\r\n            <div id='formGif'>\r\n                <div id='textGifs'>\r\n                    <label>\r\n                        Imagen\r\n                        <input\r\n                            placeholder='Imagen a buscar'\r\n                            type='text'\r\n                            maxLength='25'\r\n                            pattern=\"[A-Za-z0-9]{1,30}\"\r\n                            value={inputValue}\r\n                            onChange={handleInputChangeText}\r\n                        />\r\n                    </label>\r\n                </div>\r\n                <div id='numberGifs'>\r\n                    <label>\r\n                        Lote\r\n                        <input\r\n                            placeholder='n°'\r\n                            type='text'\r\n                            maxLength='3'\r\n                            pattern='[0-9]{1,2}'\r\n                            value={inputNumberValue}\r\n                            onChange={handleInputChangeNum}\r\n                        />\r\n                    </label>\r\n                </div>\r\n                <div id='divEnter'>\r\n                    <label>\r\n                        <br />\r\n                        <input type=\"submit\" id=\"btnForm\" value=\"Ok\" />\r\n                    </label>\r\n                </div>\r\n                <br id='brGifs' />\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategorias: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (categoria, quantity) => {\r\n\r\n    // console.log(categoria, quantity);\r\n    \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=${encodeURI(quantity)}&rating=pg&api_key=Y9ZpxPqgrW8xKcg06GWFeWUFfQGGKTiX`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n    // console.log(id, title, url);\r\n    return (\r\n        <div className='card animate__animated animate__fadeInLeft'>\r\n            <img id={id} src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { /* useState, useEffect */ } from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ categoria, quantity }) => {\r\n\r\n    // console.log(categoria, quantity);\r\n    const { data: images, loading } = useFetchGifs(categoria, quantity);\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__bounceIn'>{categoria} ({quantity})</h3>\r\n\r\n            { /* loading ? 'Cargando...' : 'Data cargada' */}\r\n            {loading && <p className='animate__animated animate__flash'>Loading...</p>}\r\n\r\n            {<div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                        // <li key={id}>{title}</li>\r\n                    ))\r\n                } \r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (categoria, quantity) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(categoria, quantity)\r\n            .then(imgs => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n\r\n    }, [categoria, quantity])\r\n\r\n    /*   setTimeout(() => {\r\n          setstate({\r\n              data: [1, 2, 3, 4, 5, 6, 7],\r\n              loading: false\r\n          })\r\n      }, 3000); */\r\n\r\n    return state;  // { data:[], loading:true }\r\n}\r\n\r\n","import { useState } from \"react\";\r\nimport { AddCategory } from \"../componenst/AddCategory\";\r\nimport { GifGrid } from '../componenst/GifGrid.js';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categorias = ['One Punch', 'Samurai X', 'Dragon ball'];\r\n\r\n    // const [categorias, setCategorias] = useState(['One Punch', 'Samurai X', 'Dragon ball']);\r\n    /* \r\n        const handleAdd = () => {\r\n            // setCategorias([...categorias,'hunterXhunter']);\r\n            setCategorias(cats => [...cats, 'hunterXhunter']);\r\n        }\r\n     */\r\n\r\n    const [categorias, setCategorias] = useState([]);\r\n\r\n    return <>\r\n\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategorias={setCategorias} />\r\n        <hr />\r\n\r\n        {\r\n            // console.log(categorias)\r\n            // categorias === 'undefinded' && console.log(categorias[0])\r\n            categorias.map((category, i) =>\r\n                // <li>{category}</li>\r\n                // console.log(category)\r\n\r\n                // limpiar(category.num)\r\n                <GifGrid\r\n                    key={category + i}\r\n                    categoria={category.cat}\r\n                    quantity={category.num}\r\n\r\n                />\r\n                // category.map(cat => {\r\n                // let texto = ((typeof cat.text) !== 'undefined') ? cat.text : false;\r\n                // let num = ((typeof cat.num) !== 'undefined') ? cat.num : false;\r\n                // console.log(cat.text);\r\n                // })\r\n                // <GifGrid\r\n                //     key={category + i}\r\n                //     categoria={category}\r\n                // />\r\n            )\r\n        }\r\n    </>\r\n\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './base/GifExpertApp';\nimport './index.css';\nimport 'animate.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// Tarea\n/**\n *  GifExpertApp\n *  <h2>GifExpertApp</h2>\n *  <hr />\n */\n"],"sourceRoot":""}